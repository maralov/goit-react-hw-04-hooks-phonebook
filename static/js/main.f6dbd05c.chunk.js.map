{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/Input/Input.styled.js","components/Input/Input.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.styled.js","constants/index.js","components/App/App.jsx","utils/index.js","index.js","theme/index.js"],"names":["StyledSection","Title","Section","title","children","StyledInput","p","theme","colors","grey","borderRadius","Input","props","FormItem","ContactForm","onSubmit","useState","number","setNumber","name","setName","handleChange","currentTarget","value","resetForm","e","preventDefault","onChange","type","autoComplete","pattern","required","htmlType","icon","UserAddOutlined","prototypes","PropTypes","func","ContactList","contacts","onDeleteUser","bordered","map","id","Item","Meta","description","onClick","danger","DeleteOutlined","defaultProps","Filter","restProps","Container","LOCAL_STORAGE_CONTACTS","App","filter","setFilter","JSON","parse","localStorage","getItem","setContacts","useEffect","window","setItem","stringify","setContactsFromLocalStorage","gutter","className","md","lg","shortid","generate","find","contact","includes","alert","prevState","style","marginBottom","placeholder","length","normalizedFilter","toLowerCase","item","getVisibleContacts","contactId","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"gTAEO,IAAMA,EAAa,sFAIbC,EAAK,qH,OCFH,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAACJ,EAAD,WACGG,GAAS,cAACF,EAAD,UAAQE,IACjBC,K,wDCNMC,EAAW,uFAIF,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,OAJlB,+BAML,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,eANR,KCAT,SAASC,EAAMC,GAC5B,OAAO,cAACP,EAAD,eAAiBO,ICDnB,IAAMC,EAAQ,sFCON,SAASC,EAAT,GAAqC,IAAdC,EAAa,EAAbA,SAEpC,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAChBC,EAAQD,EAAcC,MAG5B,OAFaD,EAAcH,MAGzB,IAAK,SACHD,EAAUK,GACV,MACF,IAAK,OACHH,EAAQG,GACR,MACF,QACE,SAUAC,EAAY,WAChBN,EAAU,IACVE,EAAQ,KAGV,OACE,sBAAML,SAZa,SAAAU,GACnBA,EAAEC,iBACFX,EAASI,EAAMF,GACfO,KASA,SACE,eAAC,IAAD,WACE,cAACX,EAAD,UACE,yCAEE,cAACF,EAAD,CACEY,MAAOJ,EACPQ,SAAUN,EACVO,KAAK,OACLT,KAAK,OACLU,aAAa,MACbC,QAAQ,yHACR3B,MAAM,kcACN4B,UAAQ,SAId,cAAClB,EAAD,UACE,iDAEE,cAACF,EAAD,CACEY,MAAON,EACPU,SAAUN,EACVO,KAAK,OACLT,KAAK,SACLU,aAAa,MACbC,QAAQ,yFACR3B,MAAM,6iBACN4B,UAAQ,SAKd,cAAC,IAAD,CAAQC,SAAS,SAASJ,KAAK,UAAUK,KAAM,cAACC,EAAA,EAAD,IAA/C,8BAORpB,EAAYqB,WAAa,CACrBpB,SAAUqB,IAAUC,M,sBC9ET,SAASC,EAAT,GAAkD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAC9C,OACE,cAAC,IAAD,CAAMC,UAAQ,EAAd,SACGF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAMF,EAAb,EAAaA,OAAb,OACZ,eAAC,IAAK2B,KAAN,WACE,cAAC,IAAKA,KAAKC,KAAX,CAAgB1C,MAAOgB,EAAM2B,YAAa7B,IAC1C,cAAC,IAAD,CACE8B,QAAS,kBAAMP,EAAaG,IAC5BK,QAAM,EACNpB,KAAK,OACLK,KAAM,cAACgB,EAAA,EAAD,QANMN,QAmBxBL,EAAYY,aAAe,CACzBX,SAAU,GACVC,aAAc,c,mCC3BD,SAASW,EAAT,GAAoD,IAAlC5B,EAAiC,EAAjCA,MAAOI,EAA0B,EAA1BA,SAAayB,EAAa,iBAChE,OACE,kCACE,uDACA,cAACzC,EAAD,aAAOQ,KAAK,SAASI,MAAOA,EAAOI,SAAUA,GAAcyB,OCL1D,IAAMC,EAAS,gHCFTC,EAAyB,yBCYvB,SAASC,IAEtB,MAA4BvC,mBAAS,IAArC,mBAAOwC,EAAP,KAAeC,EAAf,KACA,EAAgCzC,oBAAS,WAAO,IAAD,EAC7C,iBCbK0C,KAAKC,MAAMC,aAAaC,QAAQP,WDarC,QAAwC,MAD1C,mBAAOf,EAAP,KAAiBuB,EAAjB,KAKAC,qBAAU,YCf+B,SAACxB,GACnCyB,OAAOJ,aAAaK,QAAQX,EAAwBI,KAAKQ,UAAU3B,IDexE4B,CAA4B5B,KAC1B,CAACA,IAsCL,OACE,cAACc,EAAD,UACE,eAAC,IAAD,CAAKe,OAAQ,GAAb,UACE,cAAC,IAAD,CAAKC,UAAU,aAAaC,GAAI,GAAIC,GAAI,GAAxC,SACE,cAACrE,EAAD,CAASC,MAAM,YAAf,SACE,cAACW,EAAD,CAAaC,SAxCF,SAACI,EAAMF,GAC1B,IAAM0B,EAAK6B,IAAQC,WAEDlC,EAASmC,MAAK,SAAAC,GAAO,OACrCA,EAAQxD,KAAKyD,SAASzD,MAIpB0D,MAAM,GAAD,OAAI1D,EAAJ,4BACL2C,GAAY,SAAAgB,GACV,MAAM,GAAN,mBAAYA,GAAZ,CAAuB,CAAEnC,KAAIxB,OAAMF,sBAkCrC,cAAC,IAAD,CAAKoD,UAAU,aAAaC,GAAI,GAAIC,GAAI,GAAxC,SACE,eAACrE,EAAD,CAASC,MAAM,WAAf,UACE,cAACgD,EAAD,CACExB,SAjCe,SAAC,GAAuB,IAC3CJ,EAD0C,EAApBD,cACAC,MAC5BkC,EAAUlC,IAgCAA,MAAOiC,EACPuB,MAAO,CAAEC,aAAc,IACvBC,YAAY,eAGb1C,EAAS2C,OACR,cAAC5C,EAAD,CACEC,SA3Ba,WACzB,IAAM4C,EAAmB3B,EAAO4B,cAChC,OAAO7C,EAASiB,QAAO,SAAA6B,GAAI,OACzBA,EAAKlE,KAAKiE,cAAcR,SAASO,MAwBbG,GACV9C,aApCc,SAAA+C,GAC1BzB,GAAY,SAAAgB,GAAS,mBACfA,EAAUtB,QAAO,SAAAmB,GAAO,OAAIA,EAAQhC,KAAO4C,SAEjD9B,EAAU,OAmCA,gCE3Ed+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAenF,MCVJ,CACbC,OAAQ,CACNmF,MAAO,UACPlF,KAAM,WAGRC,aAAc,ODIZ,SACE,cAAC6C,EAAD,QAGJqC,SAASC,eAAe,W","file":"static/js/main.f6dbd05c.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\n\nexport const StyledSection = styled.section`\n  padding: 24px 0;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 24px;\n  font-size: 36px;\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\n\nimport { StyledSection, Title } from './Section.styled';\n\nexport default function Section({ title, children }) {\n  return (\n    <StyledSection>\n      {title && <Title>{title}</Title>}\n      {children}\n    </StyledSection>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any.isRequired,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const StyledInput = styled.input`\n  display: block;\n  width: 100%;\n\n  border: 1px solid ${p => p.theme.colors.grey};\n  padding: 4px;\n  border-radius: ${p => p.theme.borderRadius}; ;\n`;\n","import { StyledInput } from './Input.styled';\n\nexport default function Input(props) {\n  return <StyledInput {...props} />;\n}\n","import styled from '@emotion/styled/macro';\n\nexport const FormItem = styled.div`\n  margin-bottom: 16px;\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button } from 'antd';\nimport { UserAddOutlined } from '@ant-design/icons';\n\nimport Input from '../Input/';\nimport { FormItem } from './ContactForm.styled';\n\n\nexport default function ContactForm({ onSubmit } ) {\n\n  const [number, setNumber] = useState('');\n  const [name, setName] = useState('');\n\n  const handleChange = ({ currentTarget }) => {\n    const value = currentTarget.value;\n    const name = currentTarget.name;\n\n    switch (name) {\n      case 'number':\n        setNumber(value);\n        break;\n      case 'name':\n        setName(value);\n        break;\n      default:\n        return\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Card>\n        <FormItem>\n          <label>\n            Name\n            <Input\n              value={name}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              autoComplete=\"off\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n        </FormItem>\n        <FormItem>\n          <label>\n            Phone Number\n            <Input\n              value={number}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"number\"\n              autoComplete=\"off\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n        </FormItem>\n\n        <Button htmlType=\"submit\" type=\"primary\" icon={<UserAddOutlined />}>\n          Add contact\n        </Button>\n      </Card>\n    </form>\n  );\n}\nContactForm.prototypes = {\n    onSubmit: PropTypes.func,\n}\n","import PropTypes from 'prop-types';\n\nimport { List, Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nexport default function ContactList({ contacts, onDeleteUser }) {\n  return (\n    <List bordered>\n      {contacts.map(({ id, name, number }) => (\n        <List.Item key={id}>\n          <List.Item.Meta title={name} description={number} />\n          <Button\n            onClick={() => onDeleteUser(id)}\n            danger\n            type=\"text\"\n            icon={<DeleteOutlined />}\n          ></Button>\n        </List.Item>\n      ))}\n    </List>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteUser: PropTypes.func,\n};\n\nContactList.defaultProps = {\n  contacts: [],\n  onDeleteUser: () => {},\n};\n","import Input from '../Input';\nimport PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChange, ...restProps }) {\n  return (\n    <label>\n      <h3>Find contacts by name</h3>\n      <Input name=\"filter\" value={value} onChange={onChange} {...restProps} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Container = styled.div`\n  max-width: 1140px;\n  padding: 0 20px;\n  margin: 0 auto;\n`;\n","export const LOCAL_STORAGE_CONTACTS = 'LOCAL_STORAGE_CONTACTS'\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'antd';\nimport shortid from 'shortid';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nimport { Container } from './App.styled';\n\nimport { getContactsFromLocalStorage, setContactsFromLocalStorage } from '../../utils';\n\nexport default function App() {\n  //STATE\n  const [filter, setFilter] = useState('');\n  const [contacts, setContacts] = useState(() => {\n    return getContactsFromLocalStorage() ?? []\n  })\n\n  //EFFECT\n  useEffect(() => {\n    setContactsFromLocalStorage(contacts)\n  },  [contacts])\n\n  //HANDLERS\n  const handleSubmit = (name, number) => {\n    const id = shortid.generate();\n\n    const isContact = contacts.find(contact =>\n      contact.name.includes(name),\n    );\n\n    isContact\n      ? alert(`${name} is already in contacts`)\n      : setContacts(prevState => {\n          return  [...prevState, { id, name, number }]\n        });\n  };\n\n  const handleFilterChange = ({ currentTarget }) => {\n    const value = currentTarget.value;\n    setFilter(value);\n  };\n\n\n  const handleDeleteContact = contactId => {\n    setContacts(prevState => (\n      [...prevState.filter(contact => contact.id !== contactId)]\n    ));\n    setFilter('');\n  };\n\n  //HELPERS\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <Container>\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" md={18} lg={10}>\n          <Section title=\"Phonebook\">\n            <ContactForm onSubmit={handleSubmit} />\n          </Section>\n        </Col>\n\n        <Col className=\"gutter-row\" md={18} lg={20}>\n          <Section title=\"Contacts\">\n            <Filter\n              onChange={handleFilterChange}\n              value={filter}\n              style={{ marginBottom: 24 }}\n              placeholder=\"Enter name\"\n            />\n\n            {contacts.length ? (\n              <ContactList\n                contacts={getVisibleContacts()}\n                onDeleteUser={handleDeleteContact}\n              />\n            ) : (\n              'Phonebook is Empty '\n            )}\n          </Section>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import { LOCAL_STORAGE_CONTACTS } from '../constants';\n\nexport const getContactsFromLocalStorage = () => {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_CONTACTS))\n}\nexport const setContactsFromLocalStorage = (contacts) => {\n  return window.localStorage.setItem(LOCAL_STORAGE_CONTACTS, JSON.stringify(contacts))\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\n\nimport theme from './theme';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/no-anonymous-default-export */\nexport default {\n  colors: {\n    black: '#000000',\n    grey: '#d6d6d6',\n  },\n\n  borderRadius: '4px',\n};\n"],"sourceRoot":""}